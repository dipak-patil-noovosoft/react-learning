{"version":3,"file":"utils.cjs.production.min.js","sources":["../src/ArrayUtils.ts","../src/KeySet.ts","../src/StringUtils.ts","../src/valueEqual.ts"],"sourcesContent":["/**\n * Useful Types\n */\nexport type ArrayOrNone<T> = Array<T> | null | undefined;\n\n/**\n * Compare functions\n * -----------------\n * Functions that compares two array elements as specified by\n * the Array sort function.\n */\nexport type CompareFunction<T> = (e1: T, e2: T) => number;\n\nfunction compareNumbers(e1: number, e2: number) {\n    return e1 - e2;\n}\n\nfunction compareStrings(e1: string, e2: string) {\n    return e1.localeCompare(e2);\n}\n\n/**\n * isEqual\n * -------\n * Compares two arrays for equality. By default the order is ignored.\n */\nfunction isEqual<T>(\n    a1: Array<T>,\n    a2: Array<T>,\n    compareFunction: CompareFunction<T>,\n    ignoreOrder: boolean = true\n): boolean {\n    if (a1.length !== a2.length) {\n        return false;\n    } else {\n        // prepare arrays for comparison\n        // if ignoreOrder, then we need to copy and sort the arrays\n        const arr1 = ignoreOrder ? a1.slice(0).sort(compareFunction) : a1;\n        const arr2 = ignoreOrder ? a2.slice(0).sort(compareFunction) : a2;\n\n        // compare\n        let result = true;\n        const length = arr1.length;\n        for (let i = 0; i < length; i++) {\n            if (compareFunction(arr1[i], arr2[i]) !== 0) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n}\n\nexport const ArrayUtils = {\n    compareNumbers,\n    compareStrings,\n    isEqual,\n};\n","import { ArrayUtils } from './ArrayUtils';\n\n/**\n * A set of keys.\n * We use the TypeScript indexable type for this.\n * See https://www.typescriptlang.org/docs/handbook/interfaces.html\n *\n * Example:\n * {\n *     'Mon': true,\n *     'Wed': true,\n *     'Fri': true,\n *     'Sat': false,\n *     'Sun': false,\n * }\n */\nexport interface KeySet {\n    [item: string]: boolean;\n}\n\n/**\n * A key-value pair, with the value being a boolean\n *\n * Example:\n * {\n *     key: 'Mon',\n *     value: true,\n * }\n */\nexport interface KeyBoolValue {\n    key: string;\n    value: boolean;\n}\n\n/**\n * Returns all keys of a KeySet as an array\n */\nexport const keySetToArray = (set: KeySet) => Object.keys(set);\n\n/**\n * Returns KeySet as an array of key-value pairs\n */\nexport const keySetToKeyValue = (set: KeySet): Array<KeyBoolValue> => {\n    const keys = Object.keys(set);\n    return keys.map((key) => ({\n        key,\n        value: set[key],\n    }));\n};\n\n/**\n * Comparison function for key-value pairs\n */\nexport function compareKeyBoolValues(e1: KeyBoolValue, e2: KeyBoolValue) {\n    const result = e1.key.localeCompare(e2.key);\n    if (result !== 0) {\n        return result;\n    }\n\n    return e1.value === e2.value ? 0 : e1.value ? -1 : 1;\n}\n\n/**\n * Returns keys whose value is true\n */\nexport const keySetGetOnKeys = (set: KeySet) => {\n    const keys = Object.keys(set);\n    return keys.filter((key) => set[key]);\n};\n\n/**\n * Returns keys whose value is true\n */\nexport const keySetGetOffKeys = (set: KeySet) => {\n    const keys = Object.keys(set);\n    return keys.filter((key) => !set[key]);\n};\n\nexport const arrayToKeySet = (keys: Array<string>) =>\n    keys.reduce((keySet: KeySet, key) => {\n        keySet[key] = true;\n        return keySet;\n    }, {});\n\nexport const mergeKeySets = (...sets: Array<KeySet | undefined>) =>\n    Object.assign({}, ...sets);\n\n/**\n * Returns true if the two keySets have the same keys (ignoring order)\n * Note that the values are not compared.\n */\nexport const keySetsMatchKeys = (k1: KeySet, k2: KeySet): boolean => {\n    const a1 = keySetToArray(k1);\n    const a2 = keySetToArray(k2);\n    return ArrayUtils.isEqual(a1, a2, ArrayUtils.compareStrings);\n};\n\n/**\n * Returns true if the two keySets have the same keys and values (ignoring order)\n * Note that the values are not compared.\n */\nexport const keySetsAreEqual = (k1: KeySet, k2: KeySet): boolean => {\n    const a1 = keySetToKeyValue(k1);\n    const a2 = keySetToKeyValue(k2);\n    return ArrayUtils.isEqual(a1, a2, compareKeyBoolValues);\n};\n\n/**\n * Returns true if the supplied KeySet contains any of the specified keys\n */\nexport const keySetContainsOneOf = (\n    set: KeySet,\n    keys: Array<string>\n): boolean => {\n    // Find a key that exists in the KeySet\n    return keys.findIndex((key) => set[key]) > -1;\n};\n\n/**\n * Returns a new KeySet with values from src copied to target.\n * If a key does not exist in target, then it is not copied.\n * (This is different from Object.assign)\n * Neither src or target are mutated\n */\nexport const keySetCopyValues = (target: KeySet, src: KeySet): KeySet => {\n    const srcKeys = keySetToArray(src);\n    const targetCopy = { ...target };\n    srcKeys.forEach((srcKey) => {\n        if (target[srcKey] !== undefined) {\n            targetCopy[srcKey] = src[srcKey];\n        }\n    });\n    return targetCopy;\n};\n","/**\n * Returns an error message from any passed object\n */\nconst errorToString = (error: any) => {\n    let result = 'Something went wrong';\n\n    if (error instanceof Error) {\n        result = error.message;\n    } else if (typeof error === 'string') {\n        result = error;\n    }\n\n    return result;\n};\n\n/**\n * Returns a random string of specified length\n * (based on https://stackoverflow.com/a/1349426/293680)\n *\n * @param length\n */\nconst getRandomString = (length: number): string => {\n    let result = '';\n    const characters =\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(\n            Math.floor(Math.random() * charactersLength)\n        );\n    }\n    return result;\n};\n\n/**\n * isBlank\n * -------\n * Returns true if string is undefined or null or it's trimmed length is 0.\n * So whitespace-only strings will return true.\n *\n * Examples:\n *   isBlank(undefined)   // => true\n *   isBlank(null)        // => true\n *   isBlank('')          // => true\n *   isBlank('  ')        // => true\n *   isBlank('bob')       // => false\n *   isBlank('  bob  ')   // => false\n */\nconst isBlank = (str: string | undefined | null): boolean => {\n    return !str || str.trim().length === 0;\n};\n\n/**\n * isEmpty\n * -------\n * Returns true if string is undefined or null or it's length is 0\n * So whitespace-only strings will return false.\n *\n * Examples:\n *   isEmpty(undefined)   // => true\n *   isEmpty(null)        // => true\n *   isEmpty('')          // => true\n *   isEmpty('  ')        // => false\n *   isEmpty('bob')       // => false\n *   isEmpty('  bob  ')   // => false\n */\nconst isEmpty = (str: string | undefined | null): boolean => {\n    return !str || str.length === 0;\n};\n\n/**\n * sanitizeString\n * --------------\n * Returns a trimmed string.\n * If trimmed string has zero length, returns null.\n *\n * Examples:\n *   sanitizeString(undefined)   // => null\n *   sanitizeString(null)        // => null\n *   sanitizeString('')          // => null\n *   sanitizeString('  ')        // => null\n *   sanitizeString('bob')       // => 'bob'\n *   sanitizeString('  bob  ')   // => 'bob'\n */\nconst sanitizeString = (str: string | undefined | null): string | null => {\n    if (!str) {\n        return null;\n    }\n\n    const trimmedString = str.trim();\n    return trimmedString.length > 0 ? trimmedString : null;\n};\n\nexport const StringUtils = {\n    errorToString,\n    getRandomString,\n    isBlank,\n    isEmpty,\n    sanitizeString,\n};\n","/**\n * Determines if two JavaScript values are equal,\n * i.e. value equality vs. reference equality.\n *\n * Use cases\n * ---------\n * - Objects stored in localStorage\n * - window.history.state\n * - query strings\n *\n * Based on: https://github.com/mjackson/value-equal\n * Fix applied: https://github.com/mjackson/value-equal/issues/10\n */\nexport function valueEqual(a: any, b: any): boolean {\n    if (a === b) return true;\n\n    if (a == null || b == null) return false;\n\n    if (Array.isArray(a)) {\n        return (\n            Array.isArray(b) &&\n            a.length === b.length &&\n            a.every(function (item, index) {\n                return valueEqual(item, b[index]);\n            })\n        );\n    }\n\n    const aType = typeof a;\n    const bType = typeof b;\n\n    if (aType !== bType) return false;\n\n    if (aType === 'object') {\n        const aValue = a.valueOf\n            ? a.valueOf()\n            : Object.prototype.valueOf.call(a);\n        const bValue = b.valueOf\n            ? b.valueOf()\n            : Object.prototype.valueOf.call(b);\n\n        if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);\n\n        const aKeys = Object.keys(a);\n        const bKeys = Object.keys(b);\n\n        if (aKeys.length !== bKeys.length) return false;\n\n        return aKeys.every(function (key) {\n            return valueEqual(a[key], b[key]);\n        });\n    }\n\n    return false;\n}\n"],"names":["ArrayUtils","compareNumbers","e1","e2","compareStrings","localeCompare","isEqual","a1","a2","compareFunction","ignoreOrder","length","arr1","slice","sort","arr2","result","i","keySetToArray","set","Object","keys","keySetToKeyValue","map","key","value","compareKeyBoolValues","StringUtils","errorToString","error","Error","message","getRandomString","characters","charactersLength","charAt","Math","floor","random","isBlank","str","trim","isEmpty","sanitizeString","trimmedString","reduce","keySet","findIndex","target","src","srcKeys","targetCopy","forEach","srcKey","undefined","filter","k1","k2","sets","assign","valueEqual","a","b","Array","isArray","every","item","index","aType","aValue","valueOf","prototype","call","bValue","aKeys","bKeys"],"mappings":"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"}
{"version":3,"file":"utils.esm.js","sources":["../src/ArrayUtils.ts","../src/KeySet.ts","../src/StringUtils.ts","../src/valueEqual.ts"],"sourcesContent":["/**\n * Useful Types\n */\nexport type ArrayOrNone<T> = Array<T> | null | undefined;\n\n/**\n * Compare functions\n * -----------------\n * Functions that compares two array elements as specified by\n * the Array sort function.\n */\nexport type CompareFunction<T> = (e1: T, e2: T) => number;\n\nfunction compareNumbers(e1: number, e2: number) {\n    return e1 - e2;\n}\n\nfunction compareStrings(e1: string, e2: string) {\n    return e1.localeCompare(e2);\n}\n\n/**\n * isEqual\n * -------\n * Compares two arrays for equality. By default the order is ignored.\n */\nfunction isEqual<T>(\n    a1: Array<T>,\n    a2: Array<T>,\n    compareFunction: CompareFunction<T>,\n    ignoreOrder: boolean = true\n): boolean {\n    if (a1.length !== a2.length) {\n        return false;\n    } else {\n        // prepare arrays for comparison\n        // if ignoreOrder, then we need to copy and sort the arrays\n        const arr1 = ignoreOrder ? a1.slice(0).sort(compareFunction) : a1;\n        const arr2 = ignoreOrder ? a2.slice(0).sort(compareFunction) : a2;\n\n        // compare\n        let result = true;\n        const length = arr1.length;\n        for (let i = 0; i < length; i++) {\n            if (compareFunction(arr1[i], arr2[i]) !== 0) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n}\n\nexport const ArrayUtils = {\n    compareNumbers,\n    compareStrings,\n    isEqual,\n};\n","import { ArrayUtils } from './ArrayUtils';\n\n/**\n * A set of keys.\n * We use the TypeScript indexable type for this.\n * See https://www.typescriptlang.org/docs/handbook/interfaces.html\n *\n * Example:\n * {\n *     'Mon': true,\n *     'Wed': true,\n *     'Fri': true,\n *     'Sat': false,\n *     'Sun': false,\n * }\n */\nexport interface KeySet {\n    [item: string]: boolean;\n}\n\n/**\n * A key-value pair, with the value being a boolean\n *\n * Example:\n * {\n *     key: 'Mon',\n *     value: true,\n * }\n */\nexport interface KeyBoolValue {\n    key: string;\n    value: boolean;\n}\n\n/**\n * Returns all keys of a KeySet as an array\n */\nexport const keySetToArray = (set: KeySet) => Object.keys(set);\n\n/**\n * Returns KeySet as an array of key-value pairs\n */\nexport const keySetToKeyValue = (set: KeySet): Array<KeyBoolValue> => {\n    const keys = Object.keys(set);\n    return keys.map((key) => ({\n        key,\n        value: set[key],\n    }));\n};\n\n/**\n * Comparison function for key-value pairs\n */\nexport function compareKeyBoolValues(e1: KeyBoolValue, e2: KeyBoolValue) {\n    const result = e1.key.localeCompare(e2.key);\n    if (result !== 0) {\n        return result;\n    }\n\n    return e1.value === e2.value ? 0 : e1.value ? -1 : 1;\n}\n\n/**\n * Returns keys whose value is true\n */\nexport const keySetGetOnKeys = (set: KeySet) => {\n    const keys = Object.keys(set);\n    return keys.filter((key) => set[key]);\n};\n\n/**\n * Returns keys whose value is true\n */\nexport const keySetGetOffKeys = (set: KeySet) => {\n    const keys = Object.keys(set);\n    return keys.filter((key) => !set[key]);\n};\n\nexport const arrayToKeySet = (keys: Array<string>) =>\n    keys.reduce((keySet: KeySet, key) => {\n        keySet[key] = true;\n        return keySet;\n    }, {});\n\nexport const mergeKeySets = (...sets: Array<KeySet | undefined>) =>\n    Object.assign({}, ...sets);\n\n/**\n * Returns true if the two keySets have the same keys (ignoring order)\n * Note that the values are not compared.\n */\nexport const keySetsMatchKeys = (k1: KeySet, k2: KeySet): boolean => {\n    const a1 = keySetToArray(k1);\n    const a2 = keySetToArray(k2);\n    return ArrayUtils.isEqual(a1, a2, ArrayUtils.compareStrings);\n};\n\n/**\n * Returns true if the two keySets have the same keys and values (ignoring order)\n * Note that the values are not compared.\n */\nexport const keySetsAreEqual = (k1: KeySet, k2: KeySet): boolean => {\n    const a1 = keySetToKeyValue(k1);\n    const a2 = keySetToKeyValue(k2);\n    return ArrayUtils.isEqual(a1, a2, compareKeyBoolValues);\n};\n\n/**\n * Returns true if the supplied KeySet contains any of the specified keys\n */\nexport const keySetContainsOneOf = (\n    set: KeySet,\n    keys: Array<string>\n): boolean => {\n    // Find a key that exists in the KeySet\n    return keys.findIndex((key) => set[key]) > -1;\n};\n\n/**\n * Returns a new KeySet with values from src copied to target.\n * If a key does not exist in target, then it is not copied.\n * (This is different from Object.assign)\n * Neither src or target are mutated\n */\nexport const keySetCopyValues = (target: KeySet, src: KeySet): KeySet => {\n    const srcKeys = keySetToArray(src);\n    const targetCopy = { ...target };\n    srcKeys.forEach((srcKey) => {\n        if (target[srcKey] !== undefined) {\n            targetCopy[srcKey] = src[srcKey];\n        }\n    });\n    return targetCopy;\n};\n","/**\n * Returns an error message from any passed object\n */\nconst errorToString = (error: any) => {\n    let result = 'Something went wrong';\n\n    if (error instanceof Error) {\n        result = error.message;\n    } else if (typeof error === 'string') {\n        result = error;\n    }\n\n    return result;\n};\n\n/**\n * Returns a random string of specified length\n * (based on https://stackoverflow.com/a/1349426/293680)\n *\n * @param length\n */\nconst getRandomString = (length: number): string => {\n    let result = '';\n    const characters =\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(\n            Math.floor(Math.random() * charactersLength)\n        );\n    }\n    return result;\n};\n\n/**\n * isBlank\n * -------\n * Returns true if string is undefined or null or it's trimmed length is 0.\n * So whitespace-only strings will return true.\n *\n * Examples:\n *   isBlank(undefined)   // => true\n *   isBlank(null)        // => true\n *   isBlank('')          // => true\n *   isBlank('  ')        // => true\n *   isBlank('bob')       // => false\n *   isBlank('  bob  ')   // => false\n */\nconst isBlank = (str: string | undefined | null): boolean => {\n    return !str || str.trim().length === 0;\n};\n\n/**\n * isEmpty\n * -------\n * Returns true if string is undefined or null or it's length is 0\n * So whitespace-only strings will return false.\n *\n * Examples:\n *   isEmpty(undefined)   // => true\n *   isEmpty(null)        // => true\n *   isEmpty('')          // => true\n *   isEmpty('  ')        // => false\n *   isEmpty('bob')       // => false\n *   isEmpty('  bob  ')   // => false\n */\nconst isEmpty = (str: string | undefined | null): boolean => {\n    return !str || str.length === 0;\n};\n\n/**\n * sanitizeString\n * --------------\n * Returns a trimmed string.\n * If trimmed string has zero length, returns null.\n *\n * Examples:\n *   sanitizeString(undefined)   // => null\n *   sanitizeString(null)        // => null\n *   sanitizeString('')          // => null\n *   sanitizeString('  ')        // => null\n *   sanitizeString('bob')       // => 'bob'\n *   sanitizeString('  bob  ')   // => 'bob'\n */\nconst sanitizeString = (str: string | undefined | null): string | null => {\n    if (!str) {\n        return null;\n    }\n\n    const trimmedString = str.trim();\n    return trimmedString.length > 0 ? trimmedString : null;\n};\n\nexport const StringUtils = {\n    errorToString,\n    getRandomString,\n    isBlank,\n    isEmpty,\n    sanitizeString,\n};\n","/**\n * Determines if two JavaScript values are equal,\n * i.e. value equality vs. reference equality.\n *\n * Use cases\n * ---------\n * - Objects stored in localStorage\n * - window.history.state\n * - query strings\n *\n * Based on: https://github.com/mjackson/value-equal\n * Fix applied: https://github.com/mjackson/value-equal/issues/10\n */\nexport function valueEqual(a: any, b: any): boolean {\n    if (a === b) return true;\n\n    if (a == null || b == null) return false;\n\n    if (Array.isArray(a)) {\n        return (\n            Array.isArray(b) &&\n            a.length === b.length &&\n            a.every(function (item, index) {\n                return valueEqual(item, b[index]);\n            })\n        );\n    }\n\n    const aType = typeof a;\n    const bType = typeof b;\n\n    if (aType !== bType) return false;\n\n    if (aType === 'object') {\n        const aValue = a.valueOf\n            ? a.valueOf()\n            : Object.prototype.valueOf.call(a);\n        const bValue = b.valueOf\n            ? b.valueOf()\n            : Object.prototype.valueOf.call(b);\n\n        if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);\n\n        const aKeys = Object.keys(a);\n        const bKeys = Object.keys(b);\n\n        if (aKeys.length !== bKeys.length) return false;\n\n        return aKeys.every(function (key) {\n            return valueEqual(a[key], b[key]);\n        });\n    }\n\n    return false;\n}\n"],"names":["compareNumbers","e1","e2","compareStrings","localeCompare","isEqual","a1","a2","compareFunction","ignoreOrder","length","arr1","slice","sort","arr2","result","i","ArrayUtils","keySetToArray","set","Object","keys","keySetToKeyValue","map","key","value","compareKeyBoolValues","keySetGetOnKeys","filter","keySetGetOffKeys","arrayToKeySet","reduce","keySet","mergeKeySets","sets","assign","keySetsMatchKeys","k1","k2","keySetsAreEqual","keySetContainsOneOf","findIndex","keySetCopyValues","target","src","srcKeys","targetCopy","forEach","srcKey","undefined","errorToString","error","Error","message","getRandomString","characters","charactersLength","charAt","Math","floor","random","isBlank","str","trim","isEmpty","sanitizeString","trimmedString","StringUtils","valueEqual","a","b","Array","isArray","every","item","index","aType","bType","aValue","valueOf","prototype","call","bValue","aKeys","bKeys"],"mappings":"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"}
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var history = require('history');
var queryString = require('query-string');
var Debug = _interopDefault(require('debug'));
var mobx = require('mobx');
var utils = require('@react-force/utils');
var pathToRegexp = require('path-to-regexp');
var mobxReactLite = require('mobx-react-lite');
var React = require('react');
var React__default = _interopDefault(React);

var browserHistory = /*#__PURE__*/history.createBrowserHistory();

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["params", "queryParams"];

/**
 * createRouterState() is a factory method to create RouterState.
 *
 * - Always use this method to create a new RouterState instance.
 * - Treat RouterState as immutable. If you need a new RouterState, create a fresh one.
 * - RouterState can be serialized and deserialized. This is useful for server-side rendering.
 *
 * @param routeName
 *   Example 'department'
 *
 * @param options (optional) { [key: string]: any }
 *   Any key-value pair that application wants to stuff in RouterState.
 *   The following options have special meaning to mobx-state-router.
 *
 *   params: StringMap
 *     Example { id: 'electronics' }
 *
 *   queryParams: { [key: string]: any }
 *     Example { q: 'apple' } or { items: ['E1', 'E2'] }
 *
 *   replaceHistory: boolean
 *     If true, the router uses history.replace() when transitioning to a new state.
 *     The default is to use history.push().
 */
var createRouterState = function createRouterState(routeName, options) {
  if (options === void 0) {
    options = {};
  }

  var defaultOptions = {
    params: {},
    queryParams: {},
    replaceHistory: false
  };
  var combinedOptions = Object.assign(defaultOptions, options); // Separate out params & queryParams - they are fixed properties of RouterState

  var params = combinedOptions.params,
      queryParams = combinedOptions.queryParams,
      rest = _objectWithoutPropertiesLoose(combinedOptions, _excluded);

  return {
    routeName: routeName,
    params: params,
    queryParams: queryParams,
    options: rest
  };
};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

var debug = /*#__PURE__*/Debug('msr:TransitionState');
var TransitionState = /*#__PURE__*/function () {
  function TransitionState(routerStore, fromState) {
    this.routerStore = void 0;
    this.fromState = void 0;
    this.transitions = 0;
    this.fromRoute = void 0;
    this.transitionsThreshold = 100;
    this.routerStore = routerStore;
    this.fromState = fromState; // Create an object copy so we can modify hooks during transition.

    this.fromRoute = Object.assign({}, this.routerStore.getRoute(this.fromState.routeName));
  }

  var _proto = TransitionState.prototype;

  _proto.resolve = function resolve(toState) {
    return this.transition(toState);
  };

  _proto.transition = /*#__PURE__*/function () {
    var _transition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(toState) {
      var toRoute, redirectState;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              debug('transition from %o to %o)', this.fromState, toState);

              if (!(this.transitions >= this.transitionsThreshold)) {
                _context.next = 3;
                break;
              }

              throw new Error("Detected loop involving " + this.fromState.routeName + " -> " + toState.routeName + " transition.");

            case 3:
              // Increment transitions counter. We will use it to detected infinite loops.
              this.transitions++; // If fromState = toState, do nothing
              // This is important to avoid infinite loops caused by RouterStore.goTo()
              // triggering a change in history, which in turn causes HistoryAdapter
              // to call RouterStore.goTo().

              if (!utils.valueEqual(this.fromState, toState)) {
                _context.next = 7;
                break;
              }

              debug('states are equal, skipping');
              return _context.abrupt("return", toState);

            case 7:
              // Get transition hooks from the target state
              toRoute = this.routerStore.getRoute(toState.routeName);

              if (!(!this.fromRoute || !toRoute)) {
                _context.next = 11;
                break;
              }

              this.routerStore.setRouterState(this.routerStore.notFoundState);
              return _context.abrupt("return", toState);

            case 11:
              if (!this.fromRoute.beforeExit) {
                _context.next = 18;
                break;
              }

              _context.next = 14;
              return this.fromRoute.beforeExit(this.fromState, toState, this.routerStore);

            case 14:
              redirectState = _context.sent;
              this.fromRoute.beforeExit = undefined;

              if (!(redirectState && !utils.valueEqual(redirectState, toState))) {
                _context.next = 18;
                break;
              }

              return _context.abrupt("return", this.transition(redirectState));

            case 18:
              if (!toRoute.beforeEnter) {
                _context.next = 24;
                break;
              }

              _context.next = 21;
              return toRoute.beforeEnter(this.fromState, toState, this.routerStore);

            case 21:
              redirectState = _context.sent;

              if (!(redirectState && !utils.valueEqual(redirectState, toState))) {
                _context.next = 24;
                break;
              }

              return _context.abrupt("return", this.transition(redirectState));

            case 24:
              if (!this.fromRoute.onExit) {
                _context.next = 31;
                break;
              }

              _context.next = 27;
              return this.fromRoute.onExit(this.fromState, toState, this.routerStore);

            case 27:
              redirectState = _context.sent;
              this.fromRoute.onExit = undefined;

              if (!(redirectState && !utils.valueEqual(redirectState, toState))) {
                _context.next = 31;
                break;
              }

              return _context.abrupt("return", this.transition(redirectState));

            case 31:
              if (!toRoute.onEnter) {
                _context.next = 37;
                break;
              }

              _context.next = 34;
              return toRoute.onEnter(this.fromState, toState, this.routerStore);

            case 34:
              redirectState = _context.sent;

              if (!(redirectState && !utils.valueEqual(redirectState, toState))) {
                _context.next = 37;
                break;
              }

              return _context.abrupt("return", this.transition(redirectState));

            case 37:
              // No redirection happened in the redirect chain.
              // So transition to toState.
              this.routerStore.setRouterState(toState);
              return _context.abrupt("return", toState);

            case 39:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function transition(_x) {
      return _transition.apply(this, arguments);
    }

    return transition;
  }();

  return TransitionState;
}();

var debugSetState = /*#__PURE__*/Debug('msr:setRouterState');
var InitialRouteName = '__initial__';
var InitialRoute = {
  name: InitialRouteName,
  pattern: ''
};
var InitialRouterState = /*#__PURE__*/createRouterState(InitialRouteName);
/**
 * Holds the router state. It allows transitioning between states using
 * `goTo` methods.
 */

var RouterStore = /*#__PURE__*/function () {
  /**
   * @param routes: Route[]
   *   Any array of routes that will be used by the router
   *   to transition between states.
   *
   * @param notFoundState: RouterState
   *   The state the router will transition to if it does not
   *   know about the requested goTo state.
   *
   * @param options (optional) { [key: string]: any }
   *   Any key-value pair that application wants to stuff in RouterStore.
   *   The following options have special meaning to mobx-state-router.
   *
   *   initialState: RouterState
   *     The initial state of the router. If not specified, the router
   *     will be initialized to an internal default state and will wait
   *     for history to drive the next state.
   *
   *   queryParseOptions: any
   *     Options for parsing query strings. These are passed directly to
   *     the [query-string](https://github.com/sindresorhus/query-string)
   *     library that is used internally.
   *
   *   queryStringifyOptions: any
   *     Options for stringifying query params. These are passed directly to
   *     the [query-string](https://github.com/sindresorhus/query-string)
   *     library that is used internally.
   */
  function RouterStore(routes, notFoundState, options) {
    if (options === void 0) {
      options = {};
    }

    this.routes = void 0;
    this.notFoundState = void 0;
    this.routerState = void 0;
    this.options = void 0;
    mobx.makeObservable(this, {
      routerState: mobx.observable.ref,
      setRouterState: mobx.action
    }); // Set routes and push an internal route for the default state

    this.routes = routes;
    this.routes.push(InitialRoute); // Set options

    var defaultOptions = {
      initialState: InitialRouterState
    };
    this.options = Object.assign(defaultOptions, options); // Set states

    this.notFoundState = notFoundState;
    this.routerState = this.options.initialState;
  }

  var _proto = RouterStore.prototype;

  _proto.setRouterState = function setRouterState(routerState) {
    debugSetState('%o', routerState);
    this.routerState = routerState;
  }
  /**
   * Requests a transition to a new state. Note that the actual transition
   * may be different from the requested one based on enter and exit hooks.
   * Internally calls createRouterState() with the supplied parameters to
   * construct the target state.
   *
   * @param routeName
   *   Example 'department'
   *
   * @param options (optional) { [key: string]: any }
   *   Any key-value pair that application wants to stuff in RouterState.
   *   The following options have special meaning to mobx-state-router.
   *
   *   params: StringMap
   *     Example { id: 'electronics' }
   *
   *   queryParams: { [key: string]: any }
   *     Example { q: 'apple' } or { items: ['E1', 'E2'] }
   *
   *   replaceHistory: boolean
   *     If true, the router uses history.replace() when transitioning to a new state.
   *     The default is to use history.push().
   */
  ;

  _proto.goTo = function goTo(routeName, options) {
    if (options === void 0) {
      options = {};
    }

    var toState = createRouterState(routeName, options);
    var fromState = this.routerState;
    return this.transition(fromState, toState);
  };

  _proto.goToState = function goToState(toState) {
    var fromState = this.routerState;
    return this.transition(fromState, toState);
  };

  _proto.goToNotFound = function goToNotFound() {
    this.setRouterState(this.notFoundState);
    return Promise.resolve(this.notFoundState);
  };

  _proto.getRoute = function getRoute(routeName) {
    return this.routes.find(function (route) {
      return route.name === routeName;
    });
  };

  _proto.getCurrentRoute = function getCurrentRoute() {
    return this.getRoute(this.routerState.routeName);
  };

  _proto.getNotFoundRoute = function getNotFoundRoute() {
    var routeName = this.notFoundState.routeName;
    var route = this.getRoute(routeName);

    if (!route) {
      throw new Error("Route " + routeName + " does not exist");
    }

    return route;
  }
  /**
   * Requests a transition from fromState to toState. Note that the
   * actual transition may be different from the requested one
   * based on enter and exit hooks.
   */
  ;

  _proto.transition = function transition(fromState, toState) {
    // Get transition hooks from the two states
    var transitionState = new TransitionState(this, fromState);
    return transitionState.resolve(toState);
  };

  return RouterStore;
}();

var patternInfoCache = {};

var getPatternInfo = function getPatternInfo(pattern) {
  var patternInfo = patternInfoCache[pattern];

  if (patternInfo) {
    return patternInfo;
  }

  var keys = [];
  var regExp = pathToRegexp.pathToRegexp(pattern, keys);
  var newPatternInfo = {
    regExp: regExp,
    keys: keys
  };
  patternInfoCache[pattern] = newPatternInfo;
  return newPatternInfo;
};
/**
 * Matches a URL to a pattern.
 * For example,
 *     matchUrl('/departments/electronics', '/departments/:id'
 *     => { id: 'electronics' }
 */


var matchUrl = function matchUrl(url, pattern) {
  var _getPatternInfo = getPatternInfo(pattern),
      regExp = _getPatternInfo.regExp,
      keys = _getPatternInfo.keys;

  var match = regExp.exec(url);

  if (!match) {
    return undefined;
  }

  var values = match.slice(1);
  return keys.reduce(function (params, key, index) {
    params[key.name] = values[index];
    return params;
  }, {});
};

/*
 * Create a RouterState that matches the specified URL.
 *
 * Used by HistoryAdapter & StaticAdapter to convert the received URL
 * into a RouterState.
 */

var createMatchingRouterState = function createMatchingRouterState(location, routes, queryParseOptions) {
  // Find the matching route
  for (var rIndex = 0; rIndex < routes.length; rIndex++) {
    var route = routes[rIndex]; // Combine primary and alternate patterns into a single array.
    // Primary should always be at the beginning of the array.

    var patterns = route.altPatterns ? [route.pattern].concat(route.altPatterns) : [route.pattern]; // Match URL to the patterns

    for (var pIndex = 0; pIndex < patterns.length; pIndex++) {
      var params = matchUrl(location.pathname, patterns[pIndex]);

      if (params) {
        var queryParams = queryString.parse(location.search, queryParseOptions);
        return createRouterState(route.name, {
          params: params,
          queryParams: queryParams
        });
      }
    }
  }

  return undefined;
};

var generatorCache = {};

var getGenerator = function getGenerator(pattern) {
  var generator = generatorCache[pattern];

  if (generator) {
    return generator;
  }

  var compiledGenerator = pathToRegexp.compile(pattern);
  generatorCache[pattern] = compiledGenerator;
  return compiledGenerator;
};
/**
 * Generates a URL from a pattern and parameters.
 * For example,
 *     generateUrl('/departments/:id', { id: 'electronics' })
 *     => '/departments/electronics'
 */


var generateUrl = function generateUrl(pattern, params, queryParams, queryStringifyOptions) {
  if (pattern === void 0) {
    pattern = '/';
  }

  if (params === void 0) {
    params = {};
  }

  if (queryParams === void 0) {
    queryParams = {};
  }

  // inject params
  var generator = getGenerator(pattern);
  var url = generator(params); // inject queryParams (remember to insert the question mark)

  if (Object.keys(queryParams).length > 0) {
    url = url + "?" + queryString.stringify(queryParams, queryStringifyOptions);
  }

  return url;
};
/**
 * Converts the supplied routerState to a URL
 * @param {RouterStore} routerStore
 * @param {RouterState} routerState
 * @returns {string}
 */

var routerStateToUrl = function routerStateToUrl(routerStore, routerState) {
  var routeName = routerState.routeName,
      params = routerState.params,
      queryParams = routerState.queryParams,
      options = routerState.options;
  var route = routerStore.getRoute(routeName);

  if (!route) {
    route = routerStore.getNotFoundRoute();
  }

  return generateUrl(route.pattern, params, queryParams, options.queryStringifyOptions);
};

var debug$1 = /*#__PURE__*/Debug('msr:HistoryAdapter');
/**
 * Responsible for keeping the browser address bar and the `RouterState`
 * in sync. It also provides a `goBack()` method to go back in history.
 */

var HistoryAdapter = function HistoryAdapter(routerStore, history) {
  var _this = this;

  this.routerStore = void 0;
  this.history = void 0;

  this.goToLocation = function (location) {
    debug$1('goToLocation: %o', location); // Create the matching RouterState

    var routerState = createMatchingRouterState(location, _this.routerStore.routes, _this.routerStore.options.queryParseOptions);

    if (routerState) {
      return _this.routerStore.goToState(routerState);
    } else {
      return _this.routerStore.goToNotFound();
    }
  };

  this.goBack = function () {
    _this.history.goBack();
  };

  this.observeRouterStateChanges = function () {
    mobx.reaction(function () {
      return _this.routerStore.routerState;
    }, function (routerState) {
      var location = _this.history.location;
      var currentUrl = "" + location.pathname + location.search;
      var routerStateUrl = routerStateToUrl(_this.routerStore, routerState);

      if (currentUrl !== routerStateUrl) {
        if (routerState.options.replaceHistory) {
          _this.history.replace(routerStateUrl);
        } else {
          _this.history.push(routerStateUrl);
        }

        debug$1('history.push(%o), history.length=%d', routerStateUrl, _this.history.length);
      }
    });
  };

  this.routerStore = routerStore;
  this.history = history; // Go to current history location

  this.goToLocation(this.history.location); // Listen for history changes

  this.history.listen(function (location) {
    return _this.goToLocation(location);
  });
};

var debug$2 = /*#__PURE__*/Debug('msr:StaticAdapter');
/**
 * Responsible for driving `RouterState` programmatically instead of the
 * Browser bar. This is useful in server-side rendering scenarios where
 * the user isn’t actually clicking around, so the location never actually
 * changes. Hence, the name `static`.
 */

var StaticAdapter = function StaticAdapter(routerStore) {
  var _this = this;

  this.routerStore = void 0;

  this.goToLocation = function (location) {
    debug$2('goToLocation: %o', location); // Create the matching RouterState

    var routerState = createMatchingRouterState(location, _this.routerStore.routes, _this.routerStore.options.queryParseOptions);

    if (routerState) {
      return _this.routerStore.goTo(routerState.routeName, routerState);
    } else {
      return _this.routerStore.goToNotFound();
    }
  };

  this.routerStore = routerStore;
};

var RouterContext = /*#__PURE__*/React__default.createContext(undefined); // ---------- useRouterStore ----------

function useRouterStore() {
  var routerStore = React.useContext(RouterContext);

  if (routerStore === undefined) {
    /* istanbul ignore next */
    throw new Error('useRouterStore must be used within a RouterStoreProvider');
  }

  return routerStore;
}

var _excluded$1 = ["routeName", "params", "queryParams", "className", "activeClassName", "isActive", "children", "href", "onClick"];

function isModifiedEvent(event) {
  return event.metaKey || event.altKey || event.ctrlKey || event.shiftKey;
} // Default check for isActive is to match the routeNames


var defaultIsActive = function defaultIsActive(currentState, toState) {
  return currentState.routeName === toState.routeName;
};
/**
 * Creates an anchor tag that links to a router state. Redirects to the target
 * state without reloading the entire app, thus avoiding potential flickers.
 *
 * Example:
 *     <RouterLink routeName="home">
 *         Home
 *     </RouterLink>
 *
 * The target state is specified by the `routeName`, `params` and `queryParams`
 * properties.
 *
 * `RouterLink` accepts `className` and `activeClassName` as optional
 * properties to control the look of the link in normal and active states.
 * This feature is useful for highlighting the active link in a navbar.
 * The default test for checking if a link is active is very simple - the
 * routeName of the current RouterState should match the target routeName
 * of the link. For more control over this test, you can supply your own
 * custom `isActive` function.
 *
 * You can pass other anchor tag attributes (such as onClick and onBlur) to
 * this component. They will be passed through to the child anchor tag except
 * for `href`, which is fully computed by this component.
 */


var RouterLink = /*#__PURE__*/mobxReactLite.observer(function (_ref) {
  var routeName = _ref.routeName,
      _ref$params = _ref.params,
      params = _ref$params === void 0 ? {} : _ref$params,
      _ref$queryParams = _ref.queryParams,
      queryParams = _ref$queryParams === void 0 ? {} : _ref$queryParams,
      className = _ref.className,
      activeClassName = _ref.activeClassName,
      _ref$isActive = _ref.isActive,
      isActive = _ref$isActive === void 0 ? defaultIsActive : _ref$isActive,
      children = _ref.children,
      onClick = _ref.onClick,
      others = _objectWithoutPropertiesLoose(_ref, _excluded$1);

  var routerStore = useRouterStore();
  var routerState = routerStore.routerState;
  var toState = createRouterState(routeName, {
    params: params,
    queryParams: queryParams
  });
  var joinedClassName = (className ? className : '') + (isActive(routerState, toState) && activeClassName ? ' ' + activeClassName : '');

  var handleClick = function handleClick(event) {
    // Ignore if link is clicked using a modifier key.
    // Note: The click event is only fired for the primary pointer button,
    // i.e. the left mouse button. So no need to check for right-click.
    // https://w3c.github.io/uievents/#event-type-click
    // https://github.com/testing-library/testing-library-docs/issues/469
    if (isModifiedEvent(event)) {
      return undefined;
    } // Prevent default action which reloads the app


    event.preventDefault(); // Call onClick hook if present

    if (onClick) onClick(event); // Change the router state to trigger a refresh

    return routerStore.goToState(toState);
  };

  return React__default.createElement("a", Object.assign({
    className: joinedClassName,
    href: routerStateToUrl(routerStore, toState),
    onClick: handleClick
  }, others), children);
});

var debug$3 = /*#__PURE__*/Debug('msr:RouterView');
/**
 * Watches the router state and instantiates the associated UI component.
 * It expects two props: the `routerStore` and a `viewMap`. The `viewMap`
 * is a simple mapping from `routeNames` to React components.
 */

var RouterView = /*#__PURE__*/mobxReactLite.observer(function (_ref) {
  var viewMap = _ref.viewMap;
  var routerStore = useRouterStore();
  var routerState = routerStore.routerState;
  debug$3('render %o', routerState);
  var view = viewMap[routerState.routeName];
  return view ? React__default.createElement(React.Fragment, null, view) : null;
});

exports.HistoryAdapter = HistoryAdapter;
exports.RouterContext = RouterContext;
exports.RouterLink = RouterLink;
exports.RouterStore = RouterStore;
exports.RouterView = RouterView;
exports.StaticAdapter = StaticAdapter;
exports.TransitionState = TransitionState;
exports.browserHistory = browserHistory;
exports.createMatchingRouterState = createMatchingRouterState;
exports.createRouterState = createRouterState;
exports.generateUrl = generateUrl;
exports.matchUrl = matchUrl;
exports.routerStateToUrl = routerStateToUrl;
exports.useRouterStore = useRouterStore;
//# sourceMappingURL=mobx-state-router.cjs.development.js.map

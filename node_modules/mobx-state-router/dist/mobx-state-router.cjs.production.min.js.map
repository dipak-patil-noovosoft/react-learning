{"version":3,"file":"mobx-state-router.cjs.production.min.js","sources":["../src/adapters/browserHistory.ts","../src/stores/RouterState.ts","../node_modules/regenerator-runtime/runtime.js","../src/stores/TransitionState.ts","../src/stores/RouterStore.ts","../src/adapters/matchUrl.ts","../src/adapters/createMatchingRouterState.ts","../src/adapters/generateUrl.ts","../src/adapters/HistoryAdapter.ts","../src/adapters/StaticAdapter.ts","../src/contexts/RouterContext.ts","../src/components/RouterLink.tsx","../src/components/RouterView.tsx"],"sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport const browserHistory = createBrowserHistory();\n","import { StringMap } from '@react-force/utils';\n\n/**\n * Holds the state of the router.\n */\nexport interface RouterState {\n    // Example 'department'\n    routeName: string;\n\n    // Example { id: 'electronics' }\n    params: StringMap;\n\n    // Example { q: 'apple' } or { items: ['E1', 'E2'] }\n    queryParams: { [key: string]: any };\n\n    options: { [key: string]: any };\n}\n\n/**\n * createRouterState() is a factory method to create RouterState.\n *\n * - Always use this method to create a new RouterState instance.\n * - Treat RouterState as immutable. If you need a new RouterState, create a fresh one.\n * - RouterState can be serialized and deserialized. This is useful for server-side rendering.\n *\n * @param routeName\n *   Example 'department'\n *\n * @param options (optional) { [key: string]: any }\n *   Any key-value pair that application wants to stuff in RouterState.\n *   The following options have special meaning to mobx-state-router.\n *\n *   params: StringMap\n *     Example { id: 'electronics' }\n *\n *   queryParams: { [key: string]: any }\n *     Example { q: 'apple' } or { items: ['E1', 'E2'] }\n *\n *   replaceHistory: boolean\n *     If true, the router uses history.replace() when transitioning to a new state.\n *     The default is to use history.push().\n */\nexport const createRouterState = (\n    routeName: string,\n    options: { [key: string]: any } = {}\n) => {\n    const defaultOptions = {\n        params: {},\n        queryParams: {},\n        replaceHistory: false,\n    };\n    const combinedOptions = Object.assign(defaultOptions, options);\n\n    // Separate out params & queryParams - they are fixed properties of RouterState\n    const { params, queryParams, ...rest } = combinedOptions;\n\n    return {\n        routeName,\n        params,\n        queryParams,\n        options: rest,\n    };\n};\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { valueEqual } from '@react-force/utils';\nimport Debug from 'debug';\nimport { RouterState } from './RouterState';\nimport { RouterStore, Route } from './RouterStore';\n\nconst debug = Debug('msr:TransitionState');\n\nexport class TransitionState {\n    private transitions: number = 0;\n    private readonly fromRoute: Route;\n    private readonly transitionsThreshold: number = 100;\n\n    constructor(\n        private routerStore: RouterStore,\n        private readonly fromState: RouterState\n    ) {\n        // Create an object copy so we can modify hooks during transition.\n        this.fromRoute = Object.assign(\n            {},\n            this.routerStore.getRoute(this.fromState.routeName)\n        );\n    }\n\n    resolve(toState: RouterState): Promise<RouterState> {\n        return this.transition(toState);\n    }\n\n    private async transition(toState: RouterState): Promise<RouterState> {\n        debug('transition from %o to %o)', this.fromState, toState);\n        if (this.transitions >= this.transitionsThreshold) {\n            throw new Error(\n                `Detected loop involving ${this.fromState.routeName} -> ${toState.routeName} transition.`\n            );\n        }\n        // Increment transitions counter. We will use it to detected infinite loops.\n        this.transitions++;\n\n        // If fromState = toState, do nothing\n        // This is important to avoid infinite loops caused by RouterStore.goTo()\n        // triggering a change in history, which in turn causes HistoryAdapter\n        // to call RouterStore.goTo().\n        if (valueEqual(this.fromState, toState)) {\n            debug('states are equal, skipping');\n            return toState;\n        }\n\n        // Get transition hooks from the target state\n        const toRoute = this.routerStore.getRoute(toState.routeName);\n        if (!this.fromRoute || !toRoute) {\n            this.routerStore.setRouterState(this.routerStore.notFoundState);\n            return toState;\n        }\n\n        // Call the transition hook chain\n        let redirectState;\n\n        // Note: Do not destructure routes so that they can be implemented as\n        // classes instead of simple objects.\n        // See: https://github.com/nareshbhatia/mobx-state-router/issues/74\n\n        // ----- beforeExit -----\n        if (this.fromRoute.beforeExit) {\n            redirectState = await this.fromRoute.beforeExit(\n                this.fromState,\n                toState,\n                this.routerStore\n            );\n            this.fromRoute.beforeExit = undefined;\n            if (redirectState && !valueEqual(redirectState, toState)) {\n                return this.transition(redirectState);\n            }\n        }\n\n        // ----- beforeEnter -----\n        if (toRoute.beforeEnter) {\n            redirectState = await toRoute.beforeEnter(\n                this.fromState,\n                toState,\n                this.routerStore\n            );\n            if (redirectState && !valueEqual(redirectState, toState)) {\n                return this.transition(redirectState);\n            }\n        }\n\n        // ----- onExit -----\n        if (this.fromRoute.onExit) {\n            redirectState = await this.fromRoute.onExit(\n                this.fromState,\n                toState,\n                this.routerStore\n            );\n            this.fromRoute.onExit = undefined;\n            if (redirectState && !valueEqual(redirectState, toState)) {\n                return this.transition(redirectState);\n            }\n        }\n\n        // ----- onEnter -----\n        if (toRoute.onEnter) {\n            redirectState = await toRoute.onEnter(\n                this.fromState,\n                toState,\n                this.routerStore\n            );\n            if (redirectState && !valueEqual(redirectState, toState)) {\n                return this.transition(redirectState);\n            }\n        }\n\n        // No redirection happened in the redirect chain.\n        // So transition to toState.\n        this.routerStore.setRouterState(toState);\n        return toState;\n    }\n}\n","import Debug from 'debug';\nimport { action, makeObservable, observable } from 'mobx';\nimport { createRouterState, RouterState } from './RouterState';\nimport { TransitionState } from './TransitionState';\n\nconst debugSetState = Debug('msr:setRouterState');\n\n/**\n * A function called when transitioning from fromState to toState.\n * If it returns a RouterState, then the router redirects to that state.\n * If it returns a void, then the router proceeds to the next transition hook.\n * When no more hooks are left, it simply navigates to toState.\n */\nexport type TransitionHook = (\n    fromState: RouterState,\n    toState: RouterState,\n    routerStore: RouterStore\n) => Promise<RouterState | void>;\n\n/**\n * A `Route` consists of a name, a URL matching pattern and optional\n * enter/exit hooks. The `RouterStore` is initialized with an array\n * of routes which it uses to transition between states.\n *\n * Note: Don't destructure routes to allow implementing them as classes.\n * See https://github.com/nareshbhatia/mobx-state-router/issues/74\n */\nexport interface Route {\n    /** route name, e.g. 'department' */\n    name: string;\n\n    /** route matching pattern, e.g. '/departments/:id' */\n    pattern: string;\n\n    /**\n     * Alternate route matching patterns. These support legacy routes\n     * and go one way only, from browser location to router state.\n     */\n    altPatterns?: Array<string>;\n\n    // Enter/exit hooks\n    beforeExit?: TransitionHook;\n    beforeEnter?: TransitionHook;\n    onExit?: TransitionHook;\n    onEnter?: TransitionHook;\n}\n\nconst InitialRouteName = '__initial__';\nconst InitialRoute = {\n    name: InitialRouteName,\n    pattern: '',\n};\nconst InitialRouterState = createRouterState(InitialRouteName);\n\n/**\n * Holds the router state. It allows transitioning between states using\n * `goTo` methods.\n */\nexport class RouterStore {\n    routes: Route[];\n    notFoundState: RouterState;\n    routerState: RouterState;\n    options: { [key: string]: any };\n\n    /**\n     * @param routes: Route[]\n     *   Any array of routes that will be used by the router\n     *   to transition between states.\n     *\n     * @param notFoundState: RouterState\n     *   The state the router will transition to if it does not\n     *   know about the requested goTo state.\n     *\n     * @param options (optional) { [key: string]: any }\n     *   Any key-value pair that application wants to stuff in RouterStore.\n     *   The following options have special meaning to mobx-state-router.\n     *\n     *   initialState: RouterState\n     *     The initial state of the router. If not specified, the router\n     *     will be initialized to an internal default state and will wait\n     *     for history to drive the next state.\n     *\n     *   queryParseOptions: any\n     *     Options for parsing query strings. These are passed directly to\n     *     the [query-string](https://github.com/sindresorhus/query-string)\n     *     library that is used internally.\n     *\n     *   queryStringifyOptions: any\n     *     Options for stringifying query params. These are passed directly to\n     *     the [query-string](https://github.com/sindresorhus/query-string)\n     *     library that is used internally.\n     */\n    constructor(\n        routes: Route[],\n        notFoundState: RouterState,\n        options: { [key: string]: any } = {}\n    ) {\n        makeObservable(this, {\n            routerState: observable.ref,\n            setRouterState: action,\n        });\n\n        // Set routes and push an internal route for the default state\n        this.routes = routes;\n        this.routes.push(InitialRoute);\n\n        // Set options\n        const defaultOptions = {\n            initialState: InitialRouterState,\n        };\n        this.options = Object.assign(defaultOptions, options);\n\n        // Set states\n        this.notFoundState = notFoundState;\n        this.routerState = this.options.initialState;\n    }\n\n    setRouterState(routerState: RouterState) {\n        debugSetState('%o', routerState);\n        this.routerState = routerState;\n    }\n\n    /**\n     * Requests a transition to a new state. Note that the actual transition\n     * may be different from the requested one based on enter and exit hooks.\n     * Internally calls createRouterState() with the supplied parameters to\n     * construct the target state.\n     *\n     * @param routeName\n     *   Example 'department'\n     *\n     * @param options (optional) { [key: string]: any }\n     *   Any key-value pair that application wants to stuff in RouterState.\n     *   The following options have special meaning to mobx-state-router.\n     *\n     *   params: StringMap\n     *     Example { id: 'electronics' }\n     *\n     *   queryParams: { [key: string]: any }\n     *     Example { q: 'apple' } or { items: ['E1', 'E2'] }\n     *\n     *   replaceHistory: boolean\n     *     If true, the router uses history.replace() when transitioning to a new state.\n     *     The default is to use history.push().\n     */\n    goTo(\n        routeName: string,\n        options: { [key: string]: any } = {}\n    ): Promise<RouterState> {\n        const toState = createRouterState(routeName, options);\n        const fromState = this.routerState;\n        return this.transition(fromState, toState);\n    }\n\n    goToState(toState: RouterState): Promise<RouterState> {\n        const fromState = this.routerState;\n        return this.transition(fromState, toState);\n    }\n\n    goToNotFound(): Promise<RouterState> {\n        this.setRouterState(this.notFoundState);\n        return Promise.resolve(this.notFoundState);\n    }\n\n    getRoute(routeName: string): Route | undefined {\n        return this.routes.find((route) => route.name === routeName);\n    }\n\n    getCurrentRoute(): Route | undefined {\n        return this.getRoute(this.routerState.routeName);\n    }\n\n    getNotFoundRoute(): Route {\n        const routeName = this.notFoundState.routeName;\n        const route = this.getRoute(routeName);\n        if (!route) {\n            throw new Error(`Route ${routeName} does not exist`);\n        }\n        return route;\n    }\n\n    /**\n     * Requests a transition from fromState to toState. Note that the\n     * actual transition may be different from the requested one\n     * based on enter and exit hooks.\n     */\n    private transition(\n        fromState: RouterState,\n        toState: RouterState\n    ): Promise<RouterState> {\n        // Get transition hooks from the two states\n        const transitionState = new TransitionState(this, fromState);\n        return transitionState.resolve(toState);\n    }\n}\n","import { StringMap } from '@react-force/utils';\nimport { Key, pathToRegexp } from 'path-to-regexp';\n\ninterface PatternInfo {\n    regExp: RegExp;\n    keys: Key[];\n}\n\ninterface PatternInfoCache {\n    [pattern: string]: PatternInfo;\n}\n\nconst patternInfoCache: PatternInfoCache = {};\n\nconst getPatternInfo = (pattern: string): PatternInfo => {\n    const patternInfo = patternInfoCache[pattern];\n    if (patternInfo) {\n        return patternInfo;\n    }\n\n    const keys: Key[] = [];\n    const regExp = pathToRegexp(pattern, keys);\n    const newPatternInfo = { regExp, keys };\n    patternInfoCache[pattern] = newPatternInfo;\n\n    return newPatternInfo;\n};\n\n/**\n * Matches a URL to a pattern.\n * For example,\n *     matchUrl('/departments/electronics', '/departments/:id'\n *     => { id: 'electronics' }\n */\nexport const matchUrl = (url: string, pattern: string) => {\n    const { regExp, keys } = getPatternInfo(pattern);\n    const match = regExp.exec(url);\n    if (!match) {\n        return undefined;\n    }\n\n    const [, ...values] = match;\n\n    return keys.reduce((params: StringMap, key, index) => {\n        params[key.name] = values[index];\n        return params;\n    }, {});\n};\n","import { Location } from 'history';\nimport { parse } from 'query-string';\nimport { createRouterState, Route, RouterState } from '../stores';\nimport { matchUrl } from './matchUrl';\n\n/*\n * Create a RouterState that matches the specified URL.\n *\n * Used by HistoryAdapter & StaticAdapter to convert the received URL\n * into a RouterState.\n */\nexport const createMatchingRouterState = (\n    location: Location,\n    routes: Route[],\n    queryParseOptions?: any\n): RouterState | undefined => {\n    // Find the matching route\n    for (let rIndex = 0; rIndex < routes.length; rIndex++) {\n        const route = routes[rIndex];\n\n        // Combine primary and alternate patterns into a single array.\n        // Primary should always be at the beginning of the array.\n        const patterns = route.altPatterns\n            ? [route.pattern].concat(route.altPatterns)\n            : [route.pattern];\n\n        // Match URL to the patterns\n        for (let pIndex = 0; pIndex < patterns.length; pIndex++) {\n            const params = matchUrl(location.pathname, patterns[pIndex]);\n            if (params) {\n                const queryParams = parse(location.search, queryParseOptions);\n                return createRouterState(route.name, {\n                    params,\n                    queryParams,\n                });\n            }\n        }\n    }\n\n    return undefined;\n};\n","import { compile, PathFunction } from 'path-to-regexp';\nimport { stringify } from 'query-string';\nimport { RouterState, RouterStore } from '../stores';\n\ninterface GeneratorCache {\n    [pattern: string]: PathFunction;\n}\n\nconst generatorCache: GeneratorCache = {};\n\nconst getGenerator = (pattern: string): PathFunction => {\n    const generator = generatorCache[pattern];\n    if (generator) {\n        return generator;\n    }\n\n    const compiledGenerator = compile(pattern);\n    generatorCache[pattern] = compiledGenerator;\n\n    return compiledGenerator;\n};\n\n/**\n * Generates a URL from a pattern and parameters.\n * For example,\n *     generateUrl('/departments/:id', { id: 'electronics' })\n *     => '/departments/electronics'\n */\nexport const generateUrl = (\n    pattern = '/',\n    params = {},\n    queryParams = {},\n    queryStringifyOptions?: any\n) => {\n    // inject params\n    const generator = getGenerator(pattern);\n    let url = generator(params);\n\n    // inject queryParams (remember to insert the question mark)\n    if (Object.keys(queryParams).length > 0) {\n        url = `${url}?${stringify(queryParams, queryStringifyOptions)}`;\n    }\n\n    return url;\n};\n\n/**\n * Converts the supplied routerState to a URL\n * @param {RouterStore} routerStore\n * @param {RouterState} routerState\n * @returns {string}\n */\nexport const routerStateToUrl = (\n    routerStore: RouterStore,\n    routerState: RouterState\n): string => {\n    const { routeName, params, queryParams, options } = routerState;\n    let route = routerStore.getRoute(routeName);\n    if (!route) {\n        route = routerStore.getNotFoundRoute();\n    }\n    return generateUrl(\n        route.pattern,\n        params,\n        queryParams,\n        options.queryStringifyOptions\n    );\n};\n","import Debug from 'debug';\nimport { History, Location } from 'history';\nimport { reaction } from 'mobx';\nimport { RouterState, RouterStore } from '../stores';\nimport { createMatchingRouterState } from './createMatchingRouterState';\nimport { routerStateToUrl } from './generateUrl';\n\nconst debug = Debug('msr:HistoryAdapter');\n\n/**\n * Responsible for keeping the browser address bar and the `RouterState`\n * in sync. It also provides a `goBack()` method to go back in history.\n */\nexport class HistoryAdapter {\n    routerStore: RouterStore;\n    history: History;\n\n    constructor(routerStore: RouterStore, history: History) {\n        this.routerStore = routerStore;\n        this.history = history;\n\n        // Go to current history location\n        this.goToLocation(this.history.location);\n\n        // Listen for history changes\n        this.history.listen((location) => this.goToLocation(location));\n    }\n\n    goToLocation = (location: Location): Promise<RouterState> => {\n        debug('goToLocation: %o', location);\n\n        // Create the matching RouterState\n        const routerState = createMatchingRouterState(\n            location,\n            this.routerStore.routes,\n            this.routerStore.options.queryParseOptions\n        );\n        if (routerState) {\n            return this.routerStore.goToState(routerState);\n        } else {\n            return this.routerStore.goToNotFound();\n        }\n    };\n\n    goBack = () => {\n        this.history.goBack();\n    };\n\n    observeRouterStateChanges = () => {\n        reaction(\n            () => this.routerStore.routerState,\n            (routerState: RouterState) => {\n                const location = this.history.location;\n                const currentUrl = `${location.pathname}${location.search}`;\n                const routerStateUrl = routerStateToUrl(\n                    this.routerStore,\n                    routerState\n                );\n                if (currentUrl !== routerStateUrl) {\n                    if (routerState.options.replaceHistory) {\n                        this.history.replace(routerStateUrl);\n                    } else {\n                        this.history.push(routerStateUrl);\n                    }\n                    debug(\n                        'history.push(%o), history.length=%d',\n                        routerStateUrl,\n                        this.history.length\n                    );\n                }\n            }\n        );\n    };\n}\n","import Debug from 'debug';\nimport { Location } from 'history';\nimport { RouterState, RouterStore } from '../stores';\nimport { createMatchingRouterState } from './createMatchingRouterState';\n\nconst debug = Debug('msr:StaticAdapter');\n\n/**\n * Responsible for driving `RouterState` programmatically instead of the\n * Browser bar. This is useful in server-side rendering scenarios where\n * the user isn’t actually clicking around, so the location never actually\n * changes. Hence, the name `static`.\n */\nexport class StaticAdapter {\n    routerStore: RouterStore;\n\n    constructor(routerStore: RouterStore) {\n        this.routerStore = routerStore;\n    }\n\n    goToLocation = (location: Location): Promise<RouterState> => {\n        debug('goToLocation: %o', location);\n\n        // Create the matching RouterState\n        const routerState = createMatchingRouterState(\n            location,\n            this.routerStore.routes,\n            this.routerStore.options.queryParseOptions\n        );\n        if (routerState) {\n            return this.routerStore.goTo(routerState.routeName, routerState);\n        } else {\n            return this.routerStore.goToNotFound();\n        }\n    };\n}\n","import React, { useContext } from 'react';\nimport { RouterStore } from '../stores';\n\n// ---------- RouterContext ----------\nexport const RouterContext = React.createContext<RouterStore | undefined>(\n    undefined\n);\n\n// ---------- useRouterStore ----------\nexport function useRouterStore(): RouterStore {\n    const routerStore = useContext(RouterContext);\n    if (routerStore === undefined) {\n        /* istanbul ignore next */\n        throw new Error(\n            'useRouterStore must be used within a RouterStoreProvider'\n        );\n    }\n    return routerStore;\n}\n","import { StringMap } from '@react-force/utils';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { routerStateToUrl } from '../adapters';\nimport { useRouterStore } from '../contexts';\nimport { createRouterState, RouterState } from '../stores';\n\nfunction isModifiedEvent(event: React.MouseEvent<HTMLElement>) {\n    return event.metaKey || event.altKey || event.ctrlKey || event.shiftKey;\n}\n\nexport interface RouterLinkProps\n    extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n    routeName: string;\n    params?: StringMap;\n    queryParams?: { [key: string]: any };\n    className?: string;\n    activeClassName?: string;\n    isActive?: (currentState: RouterState, toState: RouterState) => boolean;\n}\n\n// Default check for isActive is to match the routeNames\nconst defaultIsActive = (currentState: RouterState, toState: RouterState) =>\n    currentState.routeName === toState.routeName;\n\n/**\n * Creates an anchor tag that links to a router state. Redirects to the target\n * state without reloading the entire app, thus avoiding potential flickers.\n *\n * Example:\n *     <RouterLink routeName=\"home\">\n *         Home\n *     </RouterLink>\n *\n * The target state is specified by the `routeName`, `params` and `queryParams`\n * properties.\n *\n * `RouterLink` accepts `className` and `activeClassName` as optional\n * properties to control the look of the link in normal and active states.\n * This feature is useful for highlighting the active link in a navbar.\n * The default test for checking if a link is active is very simple - the\n * routeName of the current RouterState should match the target routeName\n * of the link. For more control over this test, you can supply your own\n * custom `isActive` function.\n *\n * You can pass other anchor tag attributes (such as onClick and onBlur) to\n * this component. They will be passed through to the child anchor tag except\n * for `href`, which is fully computed by this component.\n */\nexport const RouterLink: React.FC<RouterLinkProps> = observer(\n    ({\n        routeName,\n        params = {},\n        queryParams = {},\n        className,\n        activeClassName,\n        isActive = defaultIsActive,\n        children,\n        href, // remove from `...others`\n        onClick, // remove from `...others`\n        ...others\n    }) => {\n        const routerStore = useRouterStore();\n        const { routerState } = routerStore;\n\n        const toState = createRouterState(routeName, { params, queryParams });\n\n        const joinedClassName =\n            (className ? className : '') +\n            (isActive(routerState, toState) && activeClassName\n                ? ' ' + activeClassName\n                : '');\n\n        const handleClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\n            // Ignore if link is clicked using a modifier key.\n            // Note: The click event is only fired for the primary pointer button,\n            // i.e. the left mouse button. So no need to check for right-click.\n            // https://w3c.github.io/uievents/#event-type-click\n            // https://github.com/testing-library/testing-library-docs/issues/469\n            if (isModifiedEvent(event)) {\n                return undefined;\n            }\n\n            // Prevent default action which reloads the app\n            event.preventDefault();\n\n            // Call onClick hook if present\n            if (onClick) onClick(event);\n\n            // Change the router state to trigger a refresh\n            return routerStore.goToState(toState);\n        };\n\n        return (\n            <a\n                className={joinedClassName}\n                href={routerStateToUrl(routerStore, toState)}\n                onClick={handleClick}\n                {...others}\n            >\n                {children}\n            </a>\n        );\n    }\n);\n","import Debug from 'debug';\nimport { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { useRouterStore } from '../contexts';\n\nconst debug = Debug('msr:RouterView');\n\nexport interface ViewMap {\n    [routeName: string]: React.ReactNode;\n}\n\nexport interface RouterViewProps {\n    viewMap: ViewMap;\n}\n\n/**\n * Watches the router state and instantiates the associated UI component.\n * It expects two props: the `routerStore` and a `viewMap`. The `viewMap`\n * is a simple mapping from `routeNames` to React components.\n */\nexport const RouterView: React.FC<RouterViewProps> = observer(({ viewMap }) => {\n    const routerStore = useRouterStore();\n    const { routerState } = routerStore;\n    debug('render %o', routerState);\n\n    const view = viewMap[routerState.routeName];\n    return view ? <Fragment>{view}</Fragment> : null;\n});\n"],"names":["browserHistory","createBrowserHistory","createRouterState","routeName","options","combinedOptions","Object","assign","params","queryParams","replaceHistory","runtime","exports","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","debug","Debug","TransitionState","routerStore","fromState","transitions","fromRoute","transitionsThreshold","getRoute","toState","transition","valueEqual","toRoute","setRouterState","notFoundState","beforeExit","redirectState","beforeEnter","onExit","onEnter","debugSetState","InitialRoute","pattern","InitialRouterState","RouterStore","routes","routerState","makeObservable","observable","ref","action","initialState","goTo","goToState","goToNotFound","find","route","getCurrentRoute","getNotFoundRoute","patternInfoCache","matchUrl","url","patternInfo","newPatternInfo","regExp","pathToRegexp","getPatternInfo","match","exec","reduce","index","createMatchingRouterState","location","queryParseOptions","rIndex","patterns","altPatterns","concat","pIndex","pathname","parse","search","generatorCache","generateUrl","queryStringifyOptions","compiledGenerator","compile","getGenerator","stringify","routerStateToUrl","RouterContext","React","createContext","useRouterStore","useContext","defaultIsActive","currentState","RouterLink","observer","className","activeClassName","isActive","children","href","onClick","others","joinedClassName","event","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","preventDefault","RouterView","viewMap","view","Fragment","history","goToLocation","_this","goBack","observeRouterStateChanges","reaction","currentUrl","routerStateUrl","replace","listen"],"mappings":"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"}